/*****************************************************************************
 * Copyright (c) 2014-2020 OpenRCT2 developers
 *
 * For a complete list of all authors, please refer to contributors.md
 * Interested in contributing? Visit https://github.com/OpenRCT2/OpenRCT2
 *
 * OpenRCT2 is licensed under the GNU General Public License version 3.
 *****************************************************************************/

#include "Vehicle.h"

#include "../Context.h"
#include "../Editor.h"
#include "../Game.h"
#include "../OpenRCT2.h"
#include "../actions/RideSetStatusAction.h"
#include "../audio/AudioMixer.h"
#include "../audio/audio.h"
#include "../config/Config.h"
#include "../core/Memory.hpp"
#include "../entity/EntityRegistry.h"
#include "../entity/Particle.h"
#include "../interface/Viewport.h"
#include "../localisation/Formatter.h"
#include "../localisation/Localisation.h"
#include "../management/NewsItem.h"
#include "../platform/Platform.h"
#include "../profiling/Profiling.h"
#include "../rct12/RCT12.h"
#include "../scenario/Scenario.h"
#include "../scripting/HookEngine.h"
#include "../scripting/ScriptEngine.h"
#include "../util/Util.h"
#include "../windows/Intent.h"
#include "../world/Map.h"
#include "../world/MapAnimation.h"
#include "../world/Park.h"
#include "../world/Scenery.h"
#include "../world/SmallScenery.h"
#include "../world/Surface.h"
#include "../world/Wall.h"
#include "CableLift.h"
#include "Ride.h"
#include "RideData.h"
#include "Station.h"
#include "Track.h"
#include "TrackData.h"
#include "TrainManager.h"
#include "VehicleData.h"
#include "VehicleSubpositionData.h"

#include <algorithm>
#include <iterator>


struct RiderBrakeBehaviour
{
int32_t straightSpeed;
int32_t turnSpeed;
int32_t brakeThreshold;
int32_t followDistance;
};


int32_t Vehicle::CalculateRiderBraking() const
{
    int32_t mode = rider_speed_preference & 0xFF;

int32_t straightTargetSpeed[]={326724,376833,405033,425369,441459,454845,466341,476432,485437,493571,500993,507820,514141,520028,525538,530715,535599,540221,544608,548782,552765,556571,560218,563717,567080,570318,573439,576452,579363,582181,584911,587558,590127,592622,595049,597411,599711,601953,604139,606273,608358,610394,612386,614334,616241,618109,619940,621735,623495,625222,626918,628584,630221,631830,633412,634968,636499,638007,639492,640954,642396,643816,645217,646599,647963,649309,650637,651949,653245,654525,655791,657042,658279,659502,660713,661911,663096,664270,665432,666583,667723,668853,669973,671083,672184,673275,674358,675432,676498,677556,678606,679649,680684,681713,682734,683749,684758,685761,686758,687749,688735,689715,690690,691661,692626,693587,694544,695497,696446,697390,698331,699269,700203,701134,702062,702987,703910,704830,705747,706662,707575,708486,709395,710303,711208,712113,713016,713918,714819,715718,716618,717516,718414,719312,720209,721107,722004,722902,723799,724698,725597,726496,727397,728298,729200,730104,731009,731916,732824,733734,734646,735560,736476,737395,738316,739240,740166,741096,742029,742965,743905,744848,745795,746746,747701,748660,749624,750593,751566,752545,753529,754518,755513,756514,757521,758535,759554,760581,761615,762656,763705,764761,765826,766899,767980,769071,770171,771280,772400,773529,774670,775821,776984,778158,779345,780545,781757,782983,784223,785478,786748,788033,789335,790653,791989,793343,794716,796109,797522,798956,800413,801892,803395,804923,806478,808059,809669,811309,812980,814683,816421,818195,820006,821857,823751,825688,827672,829706,831791,833933,836134,838398,840729,843133,845614,848178,850833,853586,856446,859421,862525,865771,869173,872751,876528,880531,884795,889363,894294,899664,905583,912211,919809,928839,940319,957744,};

int32_t turnTargetSpeed[]={196608,196608,196608,223340,196608,210065,196608,229952,196608,254336,196608,213659,304076,277453,212702,230060,318075,196786,196608,237885,320279,302222,322664,196608,282414,343316,240919,247026,251751,248661,358207,322846,261941,305787,263809,360955,204472,210355,302300,338516,199874,345911,387591,265339,229006,353313,259798,265376,373581,222818,314490,405235,196608,400610,259739,384273,203829,378238,213586,218151,402089,231246,311966,371857,342956,336951,282529,368016,404246,408430,208567,270342,446461,378316,428333,309637,329500,217604,203941,438871,297290,364515,389106,395241,446848,455199,309486,241175,396943,257580,324718,390441,393674,398135,411309,367733,302766,458687,487678,483071,269883,476791,268775,436688,307362,262767,391474,399365,360816,427905,289133,296580,315741,410279,252075,303116,360573,360110,345738,424489,261376,399552,306079,347892,283138,447176,468881,308310,457082,516698,260797,259336,306396,409836,428165,426444,477340,362482,252027,310117,339773,381228,348649,506332,497995,501738,328188,513030,445439,280472,369108,257584,239333,474804,511231,441529,337395,396948,443365,436861,472985,239932,282419,351448,556009,505772,359924,579990,265592,496673,248696,454478,512014,392486,501669,514506,401559,457898,565901,514082,412894,323768,590927,410739,362870,354840,438522,442283,513165,556939,629074,587350,608318,544149,483012,248606,456588,361632,385198,382506,582971,619924,293627,387076,574239,557052,656353,328049,515768,440691,541848,280660,431205,660154,345704,421860,555772,570168,398181,545296,692549,500392,363618,600686,519056,418829,474962,672940,311033,387832,542515,296068,666109,538872,532674,494759,517530,578153,493669,308939,503021,646666,396077,471514,521645,674888,426074,290423,454390,762108,572490,444168,515248,485591,362955,526492,};

int32_t hardBrakeSpeed[]={250116,246450,201127,143418,69715,60797,125121,85804,124222,180034,194776,140282,245671,100698,174003,87453,140442,45762,78334,102923,220099,194093,260655,50944,88142,241498,125512,206649,115215,147221,266673,261773,98433,92958,80975,178520,67469,99309,134317,110075,159442,96559,128006,193601,190245,116849,67405,150641,217188,188868,246090,231496,83557,109739,70304,115196,182783,104317,94111,103282,112991,191030,218370,217512,193028,130854,128564,131623,169433,229416,162410,82666,317825,94314,259067,105862,205967,200067,116102,153214,59928,136247,115708,267748,196684,136420,239041,92968,185150,73424,103019,148677,138901,226738,197074,117366,138284,165628,143458,321227,116528,252657,163048,149334,132140,137156,212238,105852,113512,129987,191441,75308,210725,258293,170990,151826,145342,187714,170046,151996,143520,270057,235985,170027,218927,227983,204929,153491,244310,330300,163629,64057,149208,250073,196977,270921,124982,188752,39380,97723,80193,198368,248764,276412,306215,320555,87906,290549,297051,151291,209812,75553,29589,181237,247634,115667,137158,121643,131534,199119,189742,139248,219589,209203,157878,170974,242822,189087,153113,126038,114338,168916,317097,233346,310349,284843,75480,157117,202394,128384,262110,172572,291141,250088,176355,150480,131291,179588,194450,188775,189451,327745,345543,310251,109814,41356,237585,77781,249715,178952,322118,249471,216872,142992,302365,299168,361051,45416,307273,134950,270999,210913,189834,224877,135049,77349,206160,258106,231272,125415,224341,215738,71286,176186,171808,72660,283505,308021,110783,127477,135961,85728,260682,253483,143767,146192,245410,199972,216466,20470,242927,245417,85833,273525,163028,177502,100505,97149,184374,306907,244297,73908,114387,86147,128584,140434,};

int32_t followDistanceFactor[]={9,10,9,9,10,9,11,8,9,9,12,9,6,7,11,9,7,11,12,8,7,7,9,12,9,6,11,11,9,9,7,7,11,10,8,7,12,9,7,10,11,8,7,11,10,9,10,9,8,9,8,5,12,8,9,9,11,9,12,12,8,10,10,7,10,8,9,8,8,6,12,11,6,9,8,10,8,12,10,7,10,10,6,8,6,8,10,12,9,11,8,8,7,7,6,8,9,8,7,6,9,5,11,7,8,10,9,6,8,7,9,9,11,9,12,9,10,9,9,6,12,9,11,8,9,8,8,8,8,7,9,10,10,7,7,9,6,9,11,9,8,8,10,5,7,5,9,7,9,10,10,10,13,8,5,7,11,9,7,6,7,12,10,8,5,6,11,4,11,8,11,8,7,8,6,7,7,6,4,8,8,10,5,9,10,11,8,8,7,5,5,5,3,6,8,11,8,8,8,10,7,4,12,9,6,7,5,11,8,9,8,11,7,4,11,8,5,6,9,8,3,7,9,7,7,8,7,6,12,9,8,11,4,6,8,7,6,6,8,12,7,6,9,8,9,5,8,11,10,5,6,9,7,9,12,8,};

    // Brake if close to the vehicle in front
    Vehicle* prevVehicle = GetEntity<Vehicle>(prev_vehicle_on_ride);
    if (prevVehicle != nullptr && this != prevVehicle)
    {
        int32_t followDistance = std::max(0, (followDistanceFactor[mode] * (_vehicleVelocityF64E08 - 65536)) / 40000);
        int32_t distance = std::max(abs(x - prevVehicle->x), abs(y - prevVehicle->y));
        int32_t relativeVelocity = velocity - prevVehicle->velocity;
        int32_t z_diff = abs(z - prevVehicle->z);

        if (distance < followDistance && z_diff < 16 && relativeVelocity > -(1 << 16))
        {
            if (distance < followDistance / 2 || relativeVelocity > hardBrakeSpeed[mode])
            {
                return -(15 << 16);
            }
            else
            {
                return -(2 << 16);
            }
        }
    }

    // Brake more on turns
    int32_t targetSpeed = 0;
    auto trackType = GetTrackType();
    switch (trackType)
    {
            // Unbanked small turn
        case TrackElemType::LeftQuarterTurn3Tiles:
        case TrackElemType::RightQuarterTurn3Tiles:
            targetSpeed = turnTargetSpeed[mode];
            break;
        case TrackElemType::LeftQuarterTurn3TilesUp25:
        case TrackElemType::RightQuarterTurn3TilesUp25:
        case TrackElemType::LeftQuarterTurn3TilesDown25:
        case TrackElemType::RightQuarterTurn3TilesDown25:
        case TrackElemType::LeftBankToLeftQuarterTurn3TilesUp25:
        case TrackElemType::RightBankToRightQuarterTurn3TilesUp25:
        case TrackElemType::LeftQuarterTurn3TilesDown25ToLeftBank:
        case TrackElemType::RightQuarterTurn3TilesDown25ToRightBank:
            targetSpeed = (straightTargetSpeed[mode] + 3 * turnTargetSpeed[mode]) / 4;
            break;
        case TrackElemType::LeftBankedQuarterTurn3Tiles:
        case TrackElemType::RightBankedQuarterTurn3Tiles:
        case TrackElemType::LeftQuarterTurn5Tiles:
        case TrackElemType::RightQuarterTurn5Tiles:
        case TrackElemType::LeftQuarterTurn5TilesUp25:
        case TrackElemType::RightQuarterTurn5TilesUp25:
        case TrackElemType::LeftQuarterTurn5TilesDown25:
        case TrackElemType::RightQuarterTurn5TilesDown25:
            targetSpeed = (straightTargetSpeed[mode] + turnTargetSpeed[mode]) / 2;
            break;
        default:
            targetSpeed = straightTargetSpeed[mode];
            break;
    }

    // Brake if car exceeds rider's preferred max speed
    if (_vehicleVelocityF64E08 > targetSpeed + hardBrakeSpeed[mode])
    {
        return -(15 << 16);
    }
    else if (_vehicleVelocityF64E08 > targetSpeed)
    {
        return -(2 << 16);
    }

    return 0;
}
